{
	"info": {
		"_postman_id": "52643e6c-e268-4974-9620-64fbd69c7e7b",
		"name": "JWT_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9713268"
	},
	"item": [
		{
			"name": "JWKS",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7800/jwks/keys",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7800",
					"path": [
						"jwks",
						"keys"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let test_number = parseInt(pm.collectionVariables.get(\"PRESENT_TEST_CASE\")),\r",
							"    isExecutingTest = (pm.collectionVariables.get(\"INCREMENTAL_TEST\")?.toUpperCase?.() === 'TRUE');\r",
							"\r",
							"switch (test_number) {\r",
							"    case 1: // No Token sent => should fail with \"JWT expected but not found\"\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_NONE' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", \"\");\r",
							"        break;\r",
							"    case 2: // Token with NONE signature & JWT_NONE policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_NONE' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"NONE\"));\r",
							"        break;\r",
							"    case 3: // Token with RSA256 signature & JWT_RSA_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 4: // Token with RSA256 signature & JWT_RSA_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 5: // Token with RSA256 signature & JWT_RSA_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 6: // Token with RSA256 signature & JWT_RSA256_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 7: // Token with RSA256 signature & JWT_RSA256_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 8: // Token with RSA256 signature & JWT_RSA256_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 9: // Token with RSA256 signature & JWT_RSA256_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 10: // Token with RSA256 signature & JWT_RSA256_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256\"));\r",
							"        break;\r",
							"    case 11: // Token with RSA384 signature & JWT_RSA_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 12: // Token with RSA384 signature & JWT_RSA_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 13: // Token with RSA384 signature & JWT_RSA_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 14: // Token with RSA384 signature & JWT_RSA384_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA384_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 15: // Token with RSA384 signature & JWT_RSA384_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA384_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 16: // Token with RSA384 signature & JWT_RSA384_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA384_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 17: // Token with RSA384 signature & JWT_RSA384_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA384_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 18: // Token with RSA384 signature & JWT_RSA384_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA384_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA384\"));\r",
							"        break;\r",
							"    case 19: // Token with RSA512 signature & JWT_RSA_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"    case 20: // Token with RSA512 signature & JWT_RSA_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"    case 21: // Token with RSA512 signature & JWT_RSA_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"    case 22: // Token with RSA512 signature & JWT_RSA512_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA512_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"    case 23: // Token with RSA512 signature & JWT_RSA512_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA512_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"    case 24: // Token with RSA512 signature & JWT_RSA512_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA512_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"    case 25: // Token with RSA512 signature & JWT_RSA512_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA512_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"    case 26: // Token with RSA512 signature & JWT_RSA512_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA512_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA512\"));\r",
							"        break;\r",
							"\r",
							"    case 27: // Token with PS256 signature & JWT_PS_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 28: // Token with PS256 signature & JWT_PS_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 29: // Token with PS256 signature & JWT_PS_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 30: // Token with PS256 signature & JWT_PS256_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 31: // Token with PS256 signature & JWT_PS256_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS256_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 32: // Token with PS256 signature & JWT_PS256_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS256_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 33: // Token with PS256 signature & JWT_PS256_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS256_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 34: // Token with PS256 signature & JWT_PS256_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS256_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS256\"));\r",
							"        break;\r",
							"    case 35: // Token with PS384 signature & JWT_PS_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 36: // Token with PS384 signature & JWT_PS_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 37: // Token with PS384 signature & JWT_PS_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 38: // Token with PS384 signature & JWT_PS384_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS384_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 39: // Token with PS384 signature & JWT_PS384_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS384_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 40: // Token with PS384 signature & JWT_PS384_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS384_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 41: // Token with PS384 signature & JWT_PS384_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS384_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 42: // Token with PS384 signature & JWT_PS384_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS384_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS384\"));\r",
							"        break;\r",
							"    case 43: // Token with PS512 signature & JWT_PS_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"    case 44: // Token with PS512 signature & JWT_PS_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"    case 45: // Token with PS512 signature & JWT_PS_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"    case 46: // Token with PS512 signature & JWT_PS512_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS512_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"    case 47: // Token with PS512 signature & JWT_PS512_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS512_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"    case 48: // Token with PS512 signature & JWT_PS512_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS512_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"    case 49: // Token with PS512 signature & JWT_PS512_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS512_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"    case 50: // Token with PS512 signature & JWT_PS512_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_PS512_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"PS512\"));\r",
							"        break;\r",
							"\r",
							"    case 51: // Token with ES256 signature & JWT_ES_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 52: // Token with ES256 signature & JWT_ES_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 53: // Token with ES256 signature & JWT_ES_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 54: // Token with ES256 signature & JWT_ES256_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 55: // Token with ES256 signature & JWT_ES256_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES256_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 56: // Token with ES256 signature & JWT_ES256_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES256_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 57: // Token with ES256 signature & JWT_ES256_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES256_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 58: // Token with ES256 signature & JWT_ES256_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES256_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA256\"));\r",
							"        break;\r",
							"    case 59: // Token with ES384 signature & JWT_ES_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 60: // Token with ES384 signature & JWT_ES_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 61: // Token with ES384 signature & JWT_ES_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 62: // Token with ES384 signature & JWT_ES384_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES384_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 63: // Token with ES384 signature & JWT_ES384_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES384_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 64: // Token with ES384 signature & JWT_ES384_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES384_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 65: // Token with ES384 signature & JWT_ES384_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES384_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 66: // Token with ES384 signature & JWT_ES384_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES384_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA384\"));\r",
							"        break;\r",
							"    case 67: // Token with ES512 signature & JWT_ES_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"    case 68: // Token with ES512 signature & JWT_ES_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"    case 69: // Token with ES512 signature & JWT_ES_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"    case 70: // Token with ES512 signature & JWT_ES512_CertFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES512_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"    case 71: // Token with ES512 signature & JWT_ES512_CertText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES512_CertText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"    case 72: // Token with ES512 signature & JWT_ES512_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES512_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"    case 73: // Token with ES512 signature & JWT_ES512_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES512_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"    case 74: // Token with ES512 signature & JWT_ES512_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_ES512_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"ECDSA512\"));\r",
							"        break;\r",
							"\r",
							"    case 75: // Token with HMAC256 signature & JWT_HMAC256_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_HMAC256_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"HMAC256\"));\r",
							"        break;\r",
							"    case 76: // Token with HMAC256 signature & JWT_HMAC256_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_HMAC256_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"HMAC256\"));\r",
							"        break;\r",
							"    case 77: // Token with HMAC384 signature & JWT_HMAC384_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_HMAC384_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"HMAC384\"));\r",
							"        break;\r",
							"    case 78: // Token with HMAC384 signature & JWT_HMAC384_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_HMAC384_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"HMAC384\"));\r",
							"        break;\r",
							"    case 79: // Token with HMAC512 signature & JWT_HMAC512_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_HMAC512_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"HMAC512\"));\r",
							"        break;\r",
							"    case 80: // Token with HMAC512 signature & JWT_HMAC512_KeyText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_HMAC512_KeyText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"HMAC512\"));\r",
							"        break;\r",
							"\r",
							"    case 81: // Token with EdDSA signature & JWT_EDDSA_JWKS policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_EDDSA_JWKS' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"EDDSA\"));\r",
							"        break;\r",
							"    case 82: // Token with EdDSA signature & JWT_EDDSA_JWKSFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_EDDSA_JWKSFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"EDDSA\"));\r",
							"        break;\r",
							"    case 83: // Token with EdDSA signature & JWT_EDDSA_JWKSText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_EDDSA_JWKSText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"EDDSA\"));\r",
							"        break;\r",
							"    case 84: // Token with EdDSA signature & JWT_EDDSA_JWKText policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_EDDSA_JWKText' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"EDDSA\"));\r",
							"        break;\r",
							"    case 85: // Token with EdDSA signature & JWT_EDDSA_Key policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_EDDSA_Key' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"EDDSA\"));\r",
							"        break;\r",
							"    case 86: // Token with EdDSA signature & JWT_EDDSA_KeyFile policy => should pass\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_EDDSA_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"EDDSA\"));\r",
							"        break;\r",
							"\r",
							"    case 87: // Tampered Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256Tampered\"));\r",
							"        break;\r",
							"    case 88: // Invalid Client ID Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256InvalidClientID\"));\r",
							"        break;\r",
							"    case 89: // No exp Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256InvalidNoEXP\"));\r",
							"        break;\r",
							"    case 90: // Expired Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256Expired\"));\r",
							"        break;\r",
							"    case 91: // No nbf Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256InvalidNoNBF\"));\r",
							"        break;\r",
							"    case 92: // Not active Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256NotActive\"));\r",
							"        break;\r",
							"    case 93: // Invalid Audience Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256InvalidAud\"));\r",
							"        break;\r",
							"    case 94: // No Audience Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256NoAud\"));\r",
							"        break;\r",
							"    case 95: // No Custom Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_CertFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256InvalidNoCustom\"));\r",
							"        break;\r",
							"    case 96: // Invalid Custom Claim Token (\">\" scenario) with RSA256 signature & JWT_RSA256_KeyFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256InvalidCustom1\"));\r",
							"        break;\r",
							"    case 97: // Invalid Custom Claim Token (\"==\" scenario) with RSA256 signature & JWT_RSA256_KeyFile policy => should fail\r",
							"        pm.request.addHeader({ key: 'X-Policy', value: '{POL_JWTValidation}:JWT_RSA256_KeyFile' });\r",
							"        pm.collectionVariables.set(\"ACTIVE_TOKEN\", pm.collectionVariables.get(\"RSA256InvalidCustom2\"));\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let JSONresponse = pm.response.json(),\r",
							"    isIncrementalTest = (pm.collectionVariables.get(\"INCREMENTAL_TEST\")?.toUpperCase?.() === 'TRUE'),\r",
							"    test_number = parseInt(pm.collectionVariables.get(\"PRESENT_TEST_CASE\")),\r",
							"    total_test = parseInt(pm.collectionVariables.get(\"TOTAL_TEST_CASES\"));\r",
							"\r",
							"    switch (test_number) {\r",
							"        case 1: // No Token sent => should fail with \"JWT expected but not found\"\r",
							"            pm.test(\"No Token sent => Should fail with \\\"JWT expected but not found\\\"\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"GeneralSecurityException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"JWT expected but not found\");\r",
							"            });\r",
							"            break;\r",
							"        case 2: // Token with NONE signature & JWT_NONE policy => should pass\r",
							"            pm.test(\"Token with NONE signature & JWT_NONE policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 3: // Token with RSA256 signature & JWT_RSA_JWKS policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 4: // Token with RSA256 signature & JWT_RSA_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 5: // Token with RSA256 signature & JWT_RSA_JWKSText policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 6: // Token with RSA256 signature & JWT_RSA256_CertFile policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA256_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 7: // Token with RSA256 signature & JWT_RSA256_CertText policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA256_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 8: // Token with RSA256 signature & JWT_RSA256_JWKText policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA256_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 9: // Token with RSA256 signature & JWT_RSA256_KeyFile policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA256_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 10: // Token with RSA256 signature & JWT_RSA256_KeyText policy => should pass\r",
							"            pm.test(\"Token with RSA256 signature & JWT_RSA256_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 11: // Token with RSA384 signature & JWT_RSA_JWKS policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 12: // Token with RSA384 signature & JWT_RSA_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 13: // Token with RSA384 signature & JWT_RSA_JWKSText policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 14: // Token with RSA384 signature & JWT_RSA384_CertFile policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA384_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 15: // Token with RSA384 signature & JWT_RSA384_CertText policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA384_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 16: // Token with RSA384 signature & JWT_RSA384_JWKText policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA384_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 17: // Token with RSA384 signature & JWT_RSA384_KeyFile policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA384_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 18: // Token with RSA384 signature & JWT_RSA384_KeyText policy => should pass\r",
							"            pm.test(\"Token with RSA384 signature & JWT_RSA384_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 19: // Token with RSA512 signature & JWT_RSA_JWKS policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 20: // Token with RSA512 signature & JWT_RSA_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 21: // Token with RSA512 signature & JWT_RSA_JWKSText policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 22: // Token with RSA512 signature & JWT_RSA512_CertFile policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA512_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 23: // Token with RSA512 signature & JWT_RSA512_CertText policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA512_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 24: // Token with RSA512 signature & JWT_RSA512_JWKText policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA512_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 25: // Token with RSA512 signature & JWT_RSA512_KeyFile policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA512_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 26: // Token with RSA512 signature & JWT_RSA512_KeyText policy => should pass\r",
							"            pm.test(\"Token with RSA512 signature & JWT_RSA512_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"\r",
							"        case 27: // Token with PS256 signature & JWT_PS_JWKS policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 28: // Token with PS256 signature & JWT_PS_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 29: // Token with PS256 signature & JWT_PS_JWKSText policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 30: // Token with PS256 signature & JWT_PS256_CertFile policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS256_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 31: // Token with PS256 signature & JWT_PS256_CertText policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS256_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 32: // Token with PS256 signature & JWT_PS256_JWKText policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS256_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 33: // Token with PS256 signature & JWT_PS256_KeyFile policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS256_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 34: // Token with PS256 signature & JWT_PS256_KeyText policy => should pass\r",
							"            pm.test(\"Token with PS256 signature & JWT_PS256_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 35: // Token with PS384 signature & JWT_PS_JWKS policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 36: // Token with PS384 signature & JWT_PS_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 37: // Token with PS384 signature & JWT_PS_JWKSText policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 38: // Token with PS384 signature & JWT_PS384_CertFile policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS384_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 39: // Token with PS384 signature & JWT_PS384_CertText policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS384_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 40: // Token with PS384 signature & JWT_PS384_JWKText policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS384_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 41: // Token with PS384 signature & JWT_PS384_KeyFile policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS384_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 42: // Token with PS384 signature & JWT_PS384_KeyText policy => should pass\r",
							"            pm.test(\"Token with PS384 signature & JWT_PS384_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 43: // Token with PS512 signature & JWT_PS_JWKS policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 44: // Token with PS512 signature & JWT_PS_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 45: // Token with PS512 signature & JWT_PS_JWKSText policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 46: // Token with PS512 signature & JWT_PS512_CertFile policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS512_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 47: // Token with PS512 signature & JWT_PS512_CertText policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS512_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 48: // Token with PS512 signature & JWT_PS512_JWKText policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS512_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 49: // Token with PS512 signature & JWT_PS512_KeyFile policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS512_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 50: // Token with PS512 signature & JWT_PS512_KeyText policy => should pass\r",
							"            pm.test(\"Token with PS512 signature & JWT_PS512_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"\r",
							"        case 51: // Token with ES256 signature & JWT_ES_JWKS policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 52: // Token with ES256 signature & JWT_ES_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 53: // Token with ES256 signature & JWT_ES_JWKSText policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 54: // Token with ES256 signature & JWT_ES256_CertFile policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES256_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 55: // Token with ES256 signature & JWT_ES256_CertText policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES256_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 56: // Token with ES256 signature & JWT_ES256_JWKText policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES256_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 57: // Token with ES256 signature & JWT_ES256_KeyFile policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES256_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 58: // Token with ES256 signature & JWT_ES256_KeyText policy => should pass\r",
							"            pm.test(\"Token with ES256 signature & JWT_ES256_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 59: // Token with ES384 signature & JWT_ES_JWKS policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 60: // Token with ES384 signature & JWT_ES_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 61: // Token with ES384 signature & JWT_ES_JWKSText policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 62: // Token with ES384 signature & JWT_ES384_CertFile policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES384_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 63: // Token with ES384 signature & JWT_ES384_CertText policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES384_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 64: // Token with ES384 signature & JWT_ES384_JWKText policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES384_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 65: // Token with ES384 signature & JWT_ES384_KeyFile policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES384_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 66: // Token with ES384 signature & JWT_ES384_KeyText policy => should pass\r",
							"            pm.test(\"Token with ES384 signature & JWT_ES384_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 67: // Token with ES512 signature & JWT_ES_JWKS policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 68: // Token with ES512 signature & JWT_ES_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 69: // Token with ES512 signature & JWT_ES_JWKSText policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 70: // Token with ES512 signature & JWT_ES512_CertFile policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES512_CertFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 71: // Token with ES512 signature & JWT_ES512_CertText policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES512_CertText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 72: // Token with ES512 signature & JWT_ES512_JWKText policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES512_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 73: // Token with ES512 signature & JWT_ES512_KeyFile policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES512_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 74: // Token with ES512 signature & JWT_ES512_KeyText policy => should pass\r",
							"            pm.test(\"Token with ES512 signature & JWT_ES512_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"\r",
							"        case 75: // Token with HMAC256 signature & JWT_HMAC256_KeyFile policy => should pass\r",
							"            pm.test(\"Token with HMAC256 signature & JWT_HMAC256_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 76: // Token with HMAC256 signature & JWT_HMAC256_KeyText policy => should pass\r",
							"            pm.test(\"Token with HMAC256 signature & JWT_HMAC256_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 77: // Token with HMAC384 signature & JWT_HMAC384_KeyFile policy => should pass\r",
							"            pm.test(\"Token with HMAC384 signature & JWT_HMAC384_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 78: // Token with HMAC384 signature & JWT_HMAC384_KeyText policy => should pass\r",
							"            pm.test(\"Token with HMAC384 signature & JWT_HMAC384_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 79: // Token with HMAC512 signature & JWT_HMAC512_KeyFile policy => should pass\r",
							"            pm.test(\"Token with HMAC512 signature & JWT_HMAC512_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 80: // Token with HMAC512 signature & JWT_HMAC512_KeyText policy => should pass\r",
							"            pm.test(\"Token with HMAC512 signature & JWT_HMAC512_KeyText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"\r",
							"        case 81: // Token with EdDSA signature & JWT_EDDSA_JWKS policy => should pass\r",
							"            pm.test(\"Token with EdDSA signature & JWT_EDDSA_JWKS policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 82: // Token with EdDSA signature & JWT_EDDSA_JWKSFile policy => should pass\r",
							"            pm.test(\"Token with EdDSA signature & JWT_EDDSA_JWKSFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 83: // Token with EdDSA signature & JWT_EDDSA_JWKSText policy => should pass\r",
							"            pm.test(\"Token with EdDSA signature & JWT_EDDSA_JWKSText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 84: // Token with EdDSA signature & JWT_EDDSA_JWKText policy => should pass\r",
							"            pm.test(\"Token with EdDSA signature & JWT_EDDSA_JWKText policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 85: // Token with EdDSA signature & JWT_EDDSA_Key policy => should pass\r",
							"            pm.test(\"Token with EdDSA signature & JWT_EDDSA_Key policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"        case 86: // Token with EdDSA signature & JWT_EDDSA_KeyFile policy => should pass\r",
							"            pm.test(\"Token with EdDSA signature & JWT_EDDSA_KeyFile policy => should pass\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.expect(JSONresponse.fullName).to.be.not.null;\r",
							"            });\r",
							"            break;\r",
							"\r",
							"        case 87: // Tampered Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"Tampered Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"GeneralSecurityException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Signature check failed\");\r",
							"            });\r",
							"            break;\r",
							"        case 88: // Invalid Client ID Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"Invalid Client ID Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - Client ID\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"is not authorized\");\r",
							"            });\r",
							"            break;\r",
							"        case 89: // No exp Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"No exp Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - Expiration Claim not found\");\r",
							"            });\r",
							"            break;\r",
							"        case 90: // Expired Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"No exp Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"The token has expired on \");\r",
							"            });\r",
							"            break;\r",
							"        case 91: // No nbf Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"No nbf Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - Not Before Claim not found\");\r",
							"            });\r",
							"            break;\r",
							"        case 92: // Not active Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"Not active Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"The token can be used after\");\r",
							"            });\r",
							"            break;\r",
							"        case 93: // Invalid Audience Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"Invalid Audience Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - Audience Claim\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"does not contain any authorized audience\");\r",
							"            });\r",
							"            break;\r",
							"        case 94: // No Audience Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"No Audience Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - The token does not contain any Audience Claim\");\r",
							"            });\r",
							"            break;\r",
							"        case 95: // No Custom Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\r",
							"            pm.test(\"No Custom Claim Token with RSA256 signature & JWT_RSA256_CertFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - validation failed due to Mandatory Custom Claim missing\");\r",
							"            });\r",
							"            break;\r",
							"        case 96: // Invalid Custom Claim Token (\">\" scenario) with RSA256 signature & JWT_RSA256_KeyFile policy => should fail\r",
							"            pm.test(\"Invalid Custom Claim Token (\\\" > \\\" scenario) with RSA256 signature & JWT_RSA256_KeyFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - validation failed due to Mandatory Custom Claim Validations\");\r",
							"            });\r",
							"            break;\r",
							"        case 97: // Invalid Custom Claim Token (\"==\" scenario) with RSA256 signature & JWT_RSA256_KeyFile policy => should fail\r",
							"            pm.test(\"Invalid Custom Claim Token (\\\"==\\\" scenario) with RSA256 signature & JWT_RSA256_KeyFile policy => should fail\", () => {\r",
							"                pm.response.to.have.status(500);\r",
							"                pm.expect(JSONresponse.error.code).to.eql(500);\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"BadJWTException\");\r",
							"                pm.expect(JSONresponse.error.detail).to.contain(\"Invalid token - validation failed due to Mandatory Custom Claim Validations\");\r",
							"            });\r",
							"            break;\r",
							"    }\r",
							"if (isIncrementalTest) { gotoNextTestCase(); }\r",
							"\r",
							"function gotoNextTestCase() {\r",
							"    test_number++;\r",
							"    test_number > total_test ? pm.collectionVariables.set(\"PRESENT_TEST_CASE\", \"1\") : pm.collectionVariables.set(\"PRESENT_TEST_CASE\", test_number);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ACTIVE_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Policy",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Dipanjan\",\r\n    \"lastName\": \"Das\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7800/myjwtvalidator",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7800",
					"path": [
						"myjwtvalidator"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "INCREMENTAL_TEST",
			"value": "TRUE",
			"type": "string"
		},
		{
			"key": "PRESENT_TEST_CASE",
			"value": "1",
			"type": "string"
		},
		{
			"key": "TOTAL_TEST_CASES",
			"value": "97",
			"type": "string"
		},
		{
			"key": "ACTIVE_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "NONE",
			"value": "ew0KCSJraWQiOiAia2lkLU5PTkUiLA0KCSJ0eXAiOiAiSldUIiwNCgkiYWxnIjogIm5vbmUiDQp9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMTc2MywiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTEzNzYzLCJpYXQiOjE2ODMzMjE3NjMsImp0aSI6IjU4ZDQxYzg5LThhOGQtNDM2MC04NTNlLWRkNzc4N2E1MTlhNCJ9.",
			"type": "string"
		},
		{
			"key": "RSA256",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImF1ZCI6WyJodHRwOi8vZXNidGVzdGluZy5jb20vIiwiaHR0cDovL211bGV0ZXN0aW5nLmNvbS8iLCJodHRwOi8vYWNldGVzdGluZy5jb20vIl0sImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiZXhwIjoxNjg1OTQ2ODQzLCJuYmYiOjE2ODMzNTQ4NDMsImF6cCI6ImVzYnRlc3RpbmciLCJzY29wZSI6InJlYWQ6Y2xpZW50X2dyYW50cyBjcmVhdGU6Y2xpZW50X2dyYW50cyBkZWxldGU6Y2xpZW50X2dyYW50cyB1cGRhdGU6Y2xpZW50X2dyYW50cyByZWFkOmNsaWVudF9jcmVkZW50aWFscyBjcmVhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIHVwZGF0ZTpjbGllbnRfY3JlZGVudGlhbHMgZGVsZXRlOmNsaWVudF9jcmVkZW50aWFscyIsImlhdCI6MTY4MzM1NDg0MywianRpIjoiNDY4MiJ9.Vd0PtouplK5fyH9Ng47bKOR6-VzIURkmeqgxiXZpRmkKowhXHiZaHYLNubS6b3SJ5xxQNJOZRuULddm_1kzBNN_uwl3eDaLeZRPtb3iledercug80qvLgf3RMJNamGNhR7Yg7h2SBHX_ndMhqFyHQzE7kqg9w9J2257gup24C5vARZTYlr_TO2xgcXaVj8uqtWbY_YGsXe1snr-H4WzVLc2NPlPfoSrZIycBAtuEtYDt3w7khD9xy0Carzhswth93qZHRJG7fQ2_rc80pjMKN4wru2InVYWMvIyLlgan3qosvuD_yIcVas6iiQprKVjL-OLRXZAzZu2OY4Z_bNmcGA",
			"type": "string"
		},
		{
			"key": "RSA384",
			"value": "eyJraWQiOiJraWQtUlMzODQiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzM4NCJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMTY2MSwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTEzNjYxLCJpYXQiOjE2ODMzMjE2NjEsImp0aSI6Ijk1MTZhMTJmLTM3OGQtNDBkZC05ZDc4LWVmNzA0MzkxYWUxMyJ9.YIUkhEbLUrKZZMDk7sYYDdubMpmXLuwMoJvJBzEjs8CXX7PxdRHvOc1lLyApuQcrPBtYoswoVFz2oVqT3PNUL1xevVHxTlIq0f0DBergdW0ffLZ5KriXfTD05YWBavOe2xyBlgr6tn2Prmgjz5CuTeG2UxO0wKgtvR1dg2M_IKqF4ncw7TwLnTM4rZyEYSXItyIGhMlZD-fimd8n3AlWZkXwG21wLy8g9ezxJx9tKW9MMYuhIXsrXBAnWxivTipT2VmdtbTDa1QLJkxXhzsnojgSdy8oNrHVZNqe0IZn4NsmI5EvG9GN_dyPmzBAtq64lnBn4TUkqR9C-cgdyv_onA",
			"type": "string"
		},
		{
			"key": "RSA512",
			"value": "eyJraWQiOiJraWQtUlM1MTIiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMTcyNiwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTEzNzI2LCJpYXQiOjE2ODMzMjE3MjYsImp0aSI6Ijk4OWYxZmViLWM3MTQtNGY2OC05M2JiLWUzMGQyNTc0OGYxMiJ9.ZxrUgXFTXeWC4l0K90pmzPV94MJAbeSPzteYSbOuszmf94qcSlLTWp12z21PqGI1wF363Z_PH6iqdN6V81RzkdSGU0o4-fKzrDaGaN5NdgsiGgVdGFGVO6gRYY1FHdHfKGKYQEEYt0ErYruUinJEs85mONX9pTnTX6NBTemDaGwWPmgfhtzmwKMFVohDOYutwdANCCsf_pWAXE333SLuRx4XdEQr-rJzLBXO0baGa-r7iqvNTAHuVrC8S9I_jfCNk0ATiojSqQC6GTbnb5H-HQdNDwWoDOse19EcIH2_rCGz_WWCvTC64zCL7ZuIP-Ioo5FqsYoGmyuUZ2F53k_tIg",
			"type": "string"
		},
		{
			"key": "PS256",
			"value": "eyJraWQiOiJraWQtUFMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJQUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMjMwOSwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTE0MzA5LCJpYXQiOjE2ODMzMjIzMDksImp0aSI6IjY3YzEzMzliLTNhNmUtNDcwMC04OWIwLWEwNmQ2MzA2Yjg3ZSJ9.tEAl_IyNxRzr_z8wNSd4nMEN1FSXNJUIxo3aqGr7O65lLY2ANbyZr1Mrbnay1WZKPmR1RLAPMsUVH_1cdV9dN4qo-S883487oKzL-QhyQdz7yFC5HfDsQNSrrMAPgTebl9u3AHxICMplSUcL7veDJwEo-22YaU9-1ckQ2YUPOqiByxJ05YfqDNr-ef58531BhTR5UxNiTtZgG3t8jyQUH4R1iHmKEAhBIL7YKHczgQdjS0C5McPfNSeUM0Q3j8Lwn0NG1-SZGEgZu7m1Jm4wXmk1Xz_kx7KTTQ_3u3458jZZucQeO3QQRSTWQviAXPebMSgVO_sG6YJcfx1kmJWZgg",
			"type": "string"
		},
		{
			"key": "PS384",
			"value": "eyJraWQiOiJraWQtUFMzODQiLCJ0eXAiOiJKV1QiLCJhbGciOiJQUzM4NCJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMjMzOSwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTE0MzM5LCJpYXQiOjE2ODMzMjIzMzksImp0aSI6IjFjMmU5ZTRlLTI4MzMtNGZkMi1iYjEzLTY1MzcxMzg3NzQ1YSJ9.ANgUFrhYRjXUbQDPeg6HKqlHyDwlq9oaAUXce8RBpgTcR_YlTl1FeJVvSrhYyT7lZfO5IfaESTMfvJgivXggbRKhjaaS-IYmA2b5xZk_PvIk2y5Ptc9acQBXam_wWD1Jub-XM64gLjQ57KOiIA4q-RAhRat0YThjz6EO8j7P7KDeuxumsg3A-C1Rbdaxd6uTmL_oSFHTACKIWmaqiBiT3R1qkhBnpB5mgdN7pW0-eSKTViZO_apMGyAZYjWCzgyUuvjhQx6eJQI_2_mYbsLBouFijI6Mtl3EPwbnQ0SUj04tUE6jWffS6XH3JDABNvJnwoyKkxvBi4O1c5oHKQEXOA",
			"type": "string"
		},
		{
			"key": "PS512",
			"value": "eyJraWQiOiJraWQtUFM1MTIiLCJ0eXAiOiJKV1QiLCJhbGciOiJQUzUxMiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMjM1OCwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTE0MzU4LCJpYXQiOjE2ODMzMjIzNTgsImp0aSI6IjY2NTEzMTAwLThjNDgtNDljZS05OTA4LTVjMjRhMDBjNzRhZiJ9.wzSJB70-qWXnM6AwKGlxOB2z1xyd8w59qkFKd-Dwz953Vo2qsBN4Z3S9dyWRcZv-rLuw4duLCnVcTe-n_197qHjPq-SE30fpkRTKQP-gWLUnvTk_Qw9g4B7b39oGV8bfAfrwcoAI_54-zTa3Jy3ELhS9Mn6xA7zz9Pf6Qn2LLMCO4dWRKxfaTZZ1GCrBfLRBcpspEYMH2yuhc8vQ4--LkKOy8R-AV3Ep_YqXBlXvSuDq8kZARhTbW3bAHI0S2GemVRUQ0iC4_hH3sNvFearD79Ou9cBYGSZ2LGKZYXf61_BRhFkLEwwEePRI2aBoWX2pfqT23eZv4o_e35nNM_J4vQ",
			"type": "string"
		},
		{
			"key": "ECDSA256",
			"value": "eyJraWQiOiJraWQtRVMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMjQwMSwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTE0NDAxLCJpYXQiOjE2ODMzMjI0MDEsImp0aSI6IjViMzlhNWE2LWIyYjUtNDEzYy04ODkxLTMxYWE0M2EzODM3YiJ9.97TpLIuSGLlMdiVCUjE3kEJ7hKjtfe6GwBZx4gieFSa9j2yOPwwSDVrTG-DHBDh00cMse3KzCjnaX2fruewaoA",
			"type": "string"
		},
		{
			"key": "ECDSA384",
			"value": "eyJraWQiOiJraWQtRVMzODQiLCJ0eXAiOiJKV1QiLCJhbGciOiJFUzM4NCJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMjQ5OCwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTE0NDk4LCJpYXQiOjE2ODMzMjI0OTgsImp0aSI6IjEwMjViYWFiLTU0OGQtNDQzOS1hYzRhLTQ5NDllZjhmZmI0YyJ9.rNIIDR9MxKxTmY1dVFXmxLWttmrzaKGc66FsciQ-6ZmeBhkvWuT3T-j78YWE0lgGwGRBcsyx8wZZAJA9pL1OOcDIbB3sIN6qRxtDqeep7Ys57pJdR2bkTvcaw4aIOUaT",
			"type": "string"
		},
		{
			"key": "ECDSA512",
			"value": "eyJraWQiOiJraWQtRVM1MTIiLCJ0eXAiOiJKV1QiLCJhbGciOiJFUzUxMiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyMzUyNywiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTE1NTI3LCJpYXQiOjE2ODMzMjM1MjcsImp0aSI6IjU1YmE4ZTBlLTZlNWYtNDkxYy05YjY1LTlmZDE1MmJjNjlkZiJ9.AcDcr_lfgbDI2YilaWBbr11IepEuCCjnw-WhZC8UOySw2aVqlVpCAYK8rhHJCQYYQiP9APOSxVT-fRqjkXoC_Ym0AY9u5OzofhSxt-Wa9C-WH4vUbSsOSicXqY_-KbRFzC-fht3K-kEw5WndNytVvG93Ka6EQIRx0otKhfvWOoIo66Bv",
			"type": "string"
		},
		{
			"key": "HMAC256",
			"value": "eyJraWQiOiJraWQtSFMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzMyNTE0MSwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTE3MTQxLCJpYXQiOjE2ODMzMjUxNDEsImp0aSI6IjJlOTRiOThlLTMwMjAtNDdhZS1iNzA5LTRjN2E3Nzk3ZjA1MCJ9.Di_JXMBBaBR0J42OPJuo4s1Wg_8mGN3UXU4a2J2IRMs",
			"type": "string"
		},
		{
			"key": "HMAC384",
			"value": "eyJraWQiOiJraWQtSFMzODQiLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzQwNTM5OSwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg1OTk3Mzk5LCJpYXQiOjE2ODM0MDUzOTksImp0aSI6IjI2OGEwZDYyLWNmYzItNDg2ZS1iMDJlLTJiZGUxMjYzZmFiMSJ9.-gEjLbKdVW1EvSPjNAaQGfznZ798kuPF6FLKW8aZu35c2vXhG4HUuuYzY5G3Q_OH",
			"type": "string"
		},
		{
			"key": "HMAC512",
			"value": "eyJraWQiOiJraWQtSFM1MTIiLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjpbImh0dHA6Ly9lc2J0ZXN0aW5nLmNvbS8iLCJodHRwOi8vYWNldGVzdGluZy5jb20vIiwiaHR0cDovL211bGV0ZXN0aW5nLmNvbS8iXSwibmJmIjoxNjgzMzI1MDY3LCJhenAiOiJlc2J0ZXN0aW5nIiwic2NvcGUiOiJyZWFkOmNsaWVudF9ncmFudHMgY3JlYXRlOmNsaWVudF9ncmFudHMgZGVsZXRlOmNsaWVudF9ncmFudHMgdXBkYXRlOmNsaWVudF9ncmFudHMgcmVhZDpjbGllbnRfY3JlZGVudGlhbHMgY3JlYXRlOmNsaWVudF9jcmVkZW50aWFscyB1cGRhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIGRlbGV0ZTpjbGllbnRfY3JlZGVudGlhbHMiLCJleHAiOjE2ODU5MTcwNjcsImlhdCI6MTY4MzMyNTA2NywianRpIjoiNDI2OSJ9.8Le2VDmDL1r8VBoy_p1VFEzYNi1c7QAUn6-ohJKAIVrwvhItv5Y7Fh2W1HPicVrNNiDGbVetYvuwi18izzVE9w",
			"type": "string"
		},
		{
			"key": "EDDSA",
			"value": "eyJraWQiOiJraWQtRWREU0EiLCJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzQxNDIxMCwiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjg2MDA2MjEwLCJpYXQiOjE2ODM0MTQyMTAsImp0aSI6IjAzYmQzZGM1LTMzZjMtNDdlZC05ODk5LThlYjIxZDBjZGMzOCJ9.PaGa251NZ25JPyUaowusnfKZs0tt4StYD1TVb6qL-ptmXRXZ2IYzYls-UPRRRzBF4EXhweLArzMxFqrZ_Lj5BQ",
			"type": "string"
		},
		{
			"key": "RSA256Tampered",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImF1ZCI6WyJodHRwOi8vZXNidGVzdGluZy5jb20vIiwiaHR0cDovL211bGV0ZXN0aW5nLmNvbS8iLCJodHRwOi8vYWNldGVzdGluZy5jb20vIl0sImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiZXhwIjoxNjg1OTQ2ODQzLCJuYmYiOjE2ODMzNTQ4NDMsImF6cCI6ImVzYnRlc3RpbmciLCJzY29wZSI6InJlYWQ6Y2xpZW50X2dyYW50cyBjcmVhdGU6Y2xpZW50X2dyYW50cyBkZWxldGU6Y2xpZW50X2dyYW50cyB1cGRhdGU6Y2xpZW50X2dyYW50cyByZWFkOmNsaWVudF9jcmVkZW50aWFscyBjcmVhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIHVwZGF0ZTpjbGllbnRfY3JlZGVudGlhbHMgZGVsZXRlOmNsaWVudF9jcmVkZW50aWFscyIsImlhdCI6MTY4MzM1NDg0MywianRpIjoiNDY4MiJ9.ZbGzpOkGM91uV8m5EALagMHmSC_5hQ86Zx6Yj33Mz2tYTnduC7nrjpNZqjaVCjb56Q8Q52hWaT2DqUVEHibVbHcTwvF8DN5Wx-fNe75yPQWymcP1iOsCpSv9gmMcXCMyonQ_leIsgEWGQ4IuCGPuLYz2YccTXZTr2z2KAaf3OoidVhXqfdm_NJa44uXajoa9lHYiAE4SIbfn-n9oj0V3-7r3P8uw1pI4g-fBT1Jri9NkD0UwCkda22hLi6Pg0FjCr-NhmJExIBNOtMx9ryVzNqvPoEGLD53rpezIY1sEjyLQV_OcHsYUj0YDWJxRv57oD0G0dQPAUQCRdmhAIFmomg",
			"type": "string"
		},
		{
			"key": "RSA256InvalidClientID",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkaXBhbmphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImFjZV90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImFjZS10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzM1NDg0MywiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjgzNjA1ODQzLCJpYXQiOjE2ODMzNTQ4NDMsImp0aSI6IjA4Yjk3NmMzLTQxZWYtNDY4Mi1iMGM0LTczODBiOTJiMmJhYiJ9.AWFPIwh5MFA4nXvNBjVX0Gh__X4fWgrXan_QSV2mUQAxPOuK5lTMcEkOmvGs9L0aKaHOfvt5SV9c85HevEHJqLjCEyvuVl6TkNujpvbh6NMrCcK4cHtOKBuKdfPs6TcC_uEiXgDWJMfzKcGZKG2Zv6yKo2lfkvSNLtf6mJXwZa8jLkmuISFN2Prq9tCp1esaP2KvOEg5vixp3G8UrK1k0eIGXkZ63_h0QKVjm50XQ_km8JkDVSR4yDkoBMHpjwrwqfXR4mSV9FsOEOmhkEbnHNjhfp3V2yaU1yQA7vm6OQHqhe-pgDWaS2FHg37h-YmJ20oN3sMERq5-amYbb8L6aA",
			"type": "string"
		},
		{
			"key": "RSA256InvalidNoEXP",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkaXBhbmphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjpbImh0dHA6Ly9lc2J0ZXN0aW5nLmNvbS8iLCJodHRwOi8vbXVsZXRlc3RpbmcuY29tLyIsImh0dHA6Ly9hY2V0ZXN0aW5nLmNvbS8iXSwibmJmIjoxNjgzMzU0ODQzLCJhenAiOiJlc2J0ZXN0aW5nIiwic2NvcGUiOiJyZWFkOmNsaWVudF9ncmFudHMgY3JlYXRlOmNsaWVudF9ncmFudHMgZGVsZXRlOmNsaWVudF9ncmFudHMgdXBkYXRlOmNsaWVudF9ncmFudHMgcmVhZDpjbGllbnRfY3JlZGVudGlhbHMgY3JlYXRlOmNsaWVudF9jcmVkZW50aWFscyB1cGRhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIGRlbGV0ZTpjbGllbnRfY3JlZGVudGlhbHMiLCJpYXQiOjE2ODMzNTQ4NDMsImp0aSI6IjA4Yjk3NmMzLTQxZWYtNDY4Mi1iMGM0LTczODBiOTJiMmJhYiJ9.Amnskm1VgZGrAfN2mVEo4-ra37zUk8YqGKuM3b_2S-TNU3szDC0fpfZVNntGiuh-iO56VVRUaeWt1skVweTJ7xiIfzk0Ek_GcwjRGqYqvyAv13X28LAkt8D2qdbD7PS6rkn48xIaNLWivyn607dZ_EZSXitRlZlIF6PgFc2WyY2rUovs0eYg5DmHp_OH1no05bdfDbpaFFcO5s6InFhfDxL28RQjucwnADbaJ7AZXTLnyI40oLiiFTP4tGdHzjpxjTfHksl626Q7nCgphpr5TPxdLkEb9QB_jzc4TZNfmWm9iYk6nLc7dgfODmIUQc8a8fkTEfAutXAKMTJpxYF0BQ",
			"type": "string"
		},
		{
			"key": "RSA256Expired",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzM1NDg0MywiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjgzNDA1ODQzLCJpYXQiOjE2ODMzNTQ4NDMsImp0aSI6IjA4Yjk3NmMzLTQxZWYtNDY4Mi1iMGM0LTczODBiOTJiMmJhYiJ9.g_omnQivwezxJ-e-XzTzM9pBYUTdYsWyhzjPIMq9VH4dOHsJSWSz6kem5M81Ubcjf2fU4pYaax2SlViuuk9LC0f0nY_vTcqXGf4_VyUvgYqyF5q3o5Opplswn-UuqrDe0kkui3QL0MfQ9I5NnOqZ2IqZbTeM27mSGCTvzc4TYpkGlWeBxufAK4jPF8Vd96USR1oSoOyUpj8h8jlfQSpa4ANgXVklcIpFvGQdWm2iRjqgi0-2ymGmOdkmHpj8Dnxledwbc1PkVdMopna2l9rNHd2DvWMAAqqhrph87tz5LI5ZHc79XdaIdcf3PVFWIVPCNKJ1DPcAQCSDJhsvyFt8uA",
			"type": "string"
		},
		{
			"key": "RSA256InvalidNoNBF",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkaXBhbmphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjpbImh0dHA6Ly9lc2J0ZXN0aW5nLmNvbS8iLCJodHRwOi8vbXVsZXRlc3RpbmcuY29tLyIsImh0dHA6Ly9hY2V0ZXN0aW5nLmNvbS8iXSwiZXhwIjoxNjgzNjA1ODQzLCJhenAiOiJlc2J0ZXN0aW5nIiwic2NvcGUiOiJyZWFkOmNsaWVudF9ncmFudHMgY3JlYXRlOmNsaWVudF9ncmFudHMgZGVsZXRlOmNsaWVudF9ncmFudHMgdXBkYXRlOmNsaWVudF9ncmFudHMgcmVhZDpjbGllbnRfY3JlZGVudGlhbHMgY3JlYXRlOmNsaWVudF9jcmVkZW50aWFscyB1cGRhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIGRlbGV0ZTpjbGllbnRfY3JlZGVudGlhbHMiLCJpYXQiOjE2ODMzNTQ4NDMsImp0aSI6IjA4Yjk3NmMzLTQxZWYtNDY4Mi1iMGM0LTczODBiOTJiMmJhYiJ9.XmTwvGqJyG5Jhs5sf-wqi_21TdNCkOs90ErCRZO0tUcR7DNbkM05WMk7J8negmN7wFrPUIIwSvCY3AtoN7IYopX8RGUcEsQK5jaYmTtVx_zqCrRHMFMP5qkLMVNlne4jvKYMvZ1h70yu6Fx8sj7UN8vZdDkXU3rW5-SUAasctTHIj7KX1LcVYRkug0mgw2M3NAvht7iarhQtcLQX1xswNWvsU7-h_36qVHq7_fv_lGwnc7eq1q_DMmpMiM2BjdfiCwLikgEYUjL6vC_jylMRtgv_m-jnlgrF9_GArKba5h334eGxACSRMT1rXqcQ2nrt8Ty2wNEVxFwhZuivZUB_AA",
			"type": "string"
		},
		{
			"key": "RSA256NotActive",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjoiaHR0cDovL2VzYnRlc3RpbmcuY29tLyIsIm5iZiI6MTY4MzU2NTg0MywiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiZXhwIjoxNjgzNjA1ODQzLCJpYXQiOjE2ODMzNTQ4NDMsImp0aSI6IjA4Yjk3NmMzLTQxZWYtNDY4Mi1iMGM0LTczODBiOTJiMmJhYiJ9.ZbGzpOkGM91uV8m5EALagMHmSC_5hQ86Zx6Yj33Mz2tYTnduC7nrjpNZqjaVCjb56Q8Q52hWaT2DqUVEHibVbHcTwvF8DN5Wx-fNe75yPQWymcP1iOsCpSv9gmMcXCMyonQ_leIsgEWGQ4IuCGPuLYz2YccTXZTr2z2KAaf3OoidVhXqfdm_NJa44uXajoa9lHYiAE4SIbfn-n9oj0V3-7r3P8uw1pI4g-fBT1Jri9NkD0UwCkda22hLi6Pg0FjCr-NhmJExIBNOtMx9ryVzNqvPoEGLD53rpezIY1sEjyLQV_OcHsYUj0YDWJxRv57oD0G0dQPAUQCRdmhAIFmomg",
			"type": "string"
		},
		{
			"key": "RSA256InvalidAud",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkaXBhbmphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiYXVkIjpbImh0dHA6Ly9tdWxldGVzdGluZy5jb20vIiwiaHR0cDovL2FjZXRlc3RpbmcuY29tLyJdLCJleHAiOjE2ODM2MDU4NDMsIm5iZiI6MTY4MzM1NDg0MywiYXpwIjoiZXNidGVzdGluZyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6Y2xpZW50X2NyZWRlbnRpYWxzIGNyZWF0ZTpjbGllbnRfY3JlZGVudGlhbHMgdXBkYXRlOmNsaWVudF9jcmVkZW50aWFscyBkZWxldGU6Y2xpZW50X2NyZWRlbnRpYWxzIiwiaWF0IjoxNjgzMzU0ODQzLCJqdGkiOiIwOGI5NzZjMy00MWVmLTQ2ODItYjBjNC03MzgwYjkyYjJiYWIifQ.ZM4rsiU_5au9-I4Fsklrt-CFV3j3b0IO9ameWyIKHHlvazZ5BZnCYmloY3QkNsAYIjdfFJvtRu1apNBJsFTo55XfQnxSTnUns6-s8jpk0vo_PSBDXp8wRPiwrIetqh7FGeXePr9Tcn9QvyYGpaUE0bcm1ZRO5bCTShlFlBa0Ym2MB7H0l5AJmzav5_mnfKl5JHrGddjEO-XIo7cG4hmsXSkEUNJ6ZVsdYbhO1q4K0UgfQNHSwq6VeD4xX_n3MUHiTvO1z9HYziC1WSZFxBWy2Hre_OYk3PnZEEtU-WELLrnJyIRdIFTuOYkeug1sBHzeLwGOi0Z-Gvw89HTAbp-hMA",
			"type": "string"
		},
		{
			"key": "RSA256NoAud",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkaXBhbmphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiZXhwIjoxNjgzNjA1ODQzLCJuYmYiOjE2ODMzNTQ4NDMsImF6cCI6ImVzYnRlc3RpbmciLCJzY29wZSI6InJlYWQ6Y2xpZW50X2dyYW50cyBjcmVhdGU6Y2xpZW50X2dyYW50cyBkZWxldGU6Y2xpZW50X2dyYW50cyB1cGRhdGU6Y2xpZW50X2dyYW50cyByZWFkOmNsaWVudF9jcmVkZW50aWFscyBjcmVhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIHVwZGF0ZTpjbGllbnRfY3JlZGVudGlhbHMgZGVsZXRlOmNsaWVudF9jcmVkZW50aWFscyIsImlhdCI6MTY4MzM1NDg0MywianRpIjoiMDhiOTc2YzMtNDFlZi00NjgyLWIwYzQtNzM4MGI5MmIyYmFiIn0.cN4IkeZOK77j1DFdB9Qj8I6aQfHwnbT2eZwHUJ9DkPPflp_upgTjUlYNYaJSZsawcvdE0B38UylqOj1t6XqbSuTNQ2Qn66Wd4pYCe0WqxS_6HV4kA61vG-E3FaF4-ZrbMViQUYlwcuBcNjO0Gfa9Kor9-2scDk0nG50ROAdbPYdrpEm13OWdI1iK0QYl9rTjZ9OZ_eegSXEzea57SvXqHteGEoofQxxK900xwpFSDU_Szecy23sFzHx_vz530FGjMomfkHlhyNbVsOOGfdyMMtOGudxw33mTwTpyxsnD4n-d8CPrLjsA8rD_STmOmvKH6xGojVOyCGpJRlYS9HL4ug",
			"type": "string"
		},
		{
			"key": "RSA256InvalidNoCustom",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkaXBhbmphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImF1ZCI6WyJodHRwOi8vZXNidGVzdGluZy5jb20vIiwiaHR0cDovL211bGV0ZXN0aW5nLmNvbS8iLCJodHRwOi8vYWNldGVzdGluZy5jb20vIl0sImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiZXhwIjoxNjg1OTQ2ODQzLCJuYmYiOjE2ODMzNTQ4NDMsImF6cCI6ImVzYnRlc3RpbmciLCJzY29wZSI6InJlYWQ6Y2xpZW50X2dyYW50cyBjcmVhdGU6Y2xpZW50X2dyYW50cyBkZWxldGU6Y2xpZW50X2dyYW50cyB1cGRhdGU6Y2xpZW50X2dyYW50cyByZWFkOmNsaWVudF9jcmVkZW50aWFscyBjcmVhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIHVwZGF0ZTpjbGllbnRfY3JlZGVudGlhbHMgZGVsZXRlOmNsaWVudF9jcmVkZW50aWFscyIsImlhdCI6MTY4MzM1NDg0MywianRpIjoiNDY4MiJ9.MHvv2k-KMPMxtiQBWuk6Gku4cEl4tl-bumxjagQo8svk7rWlCPpPDdKC1g9qJJ5ISvZzM8pDr4VH8JLDV5p_KH9BCVzUN5oqj5tpkK7nD2HXGNUz5jI4G0Ca7bqzP2f8kKZp_qKCwjuCREtCh4stYMcxC1CrZm8qHwDpXz_-X23w3I1IoIx6bNQ0nlnY3qOlWhGOuHCCri3R6e8Yi9EzZRWabuLNHy_BtN-GtVZ4K6N1alwg2Iy-eJ8ojppGramszs_3rfbDRosTuXkK1WBbRkapAanQmHHbz4PYKM-FE06YD2z0Bbwtdt7E7T33C59n9u_Uj8d1KGstKf7eD7ozsQ",
			"type": "string"
		},
		{
			"key": "RSA256InvalidCustom1",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkYXV0aGphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImF1ZCI6WyJodHRwOi8vZXNidGVzdGluZy5jb20vIiwiaHR0cDovL211bGV0ZXN0aW5nLmNvbS8iLCJodHRwOi8vYWNldGVzdGluZy5jb20vIl0sImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiZXhwIjoxNjg1OTQ2ODQzLCJuYmYiOjE2ODMzNTQ4NDMsImF6cCI6ImVzYnRlc3RpbmciLCJzY29wZSI6InJlYWQ6Y2xpZW50X2dyYW50cyBjcmVhdGU6Y2xpZW50X2dyYW50cyBkZWxldGU6Y2xpZW50X2dyYW50cyB1cGRhdGU6Y2xpZW50X2dyYW50cyByZWFkOmNsaWVudF9jcmVkZW50aWFscyBjcmVhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIHVwZGF0ZTpjbGllbnRfY3JlZGVudGlhbHMgZGVsZXRlOmNsaWVudF9jcmVkZW50aWFscyIsImlhdCI6MTY4MzM1NDg0MywianRpIjoiNDY4MSJ9.VD6e0L4ZJ3cDCbAn6IdEvZ7KbkM9fDyiHMiVkJrHdV3DhJtbPvN0jUIMt4UJH82cKCsV5FWCOKTv4_SG5hD9E1lo6uhHzTwXip5P0vf4BAsHSUWSjoIXL6G4nMe_XP2QFeOoyogXfS4ROGDdXvTimdIYm3okoec2fAHuiNSjBQ_aIV-pS4USSqDGo_gL7j167rGOeeslB5hyFDGADhiD8_p74mmQJbE9ohUX9dE_kTzQbvz8K_yj-PSR91BqKatyGytX5kBDokuPFGP76xAiK_ro4VhkdENyySoPkYuzElE5f1SW1OT1Y7Pqy7_n4D7jgtu2UZhtI9CGPBhWoO4CuA",
			"type": "string"
		},
		{
			"key": "RSA256InvalidCustom2",
			"value": "eyJraWQiOiJraWQtUlMyNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlc2JfdGVzdGluZ0BjbGllbnRzIiwiaXNzIjoiaHR0cDovL2libWFjZS5hY2Vpc2QxMC5jb20vIiwiYWRtaW4iOiJkaXBhbmphbiIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyIsImF1ZCI6WyJodHRwOi8vZXNidGVzdGluZy5jb20vIiwiaHR0cDovL211bGV0ZXN0aW5nLmNvbS8iLCJodHRwOi8vYWNldGVzdGluZy5jb20vIl0sImNsaWVudF9pZCI6ImVzYl90ZXN0aW5nIiwiY3VzdG9tX2tleSI6ImVzYi10ZXN0aW5nIiwiZXhwIjoxNjg1OTQ2ODQzLCJuYmYiOjE2ODMzNTQ4NDMsImF6cCI6ImVzYnRlc3RpbmciLCJzY29wZSI6InJlYWQ6Y2xpZW50X2dyYW50cyBjcmVhdGU6Y2xpZW50X2dyYW50cyBkZWxldGU6Y2xpZW50X2dyYW50cyB1cGRhdGU6Y2xpZW50X2dyYW50cyByZWFkOmNsaWVudF9jcmVkZW50aWFscyBjcmVhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIHVwZGF0ZTpjbGllbnRfY3JlZGVudGlhbHMgZGVsZXRlOmNsaWVudF9jcmVkZW50aWFscyIsImlhdCI6MTY4MzM1NDg0MywianRpIjoiNDY4MiJ9.bIV9MnKrIzKWy-eB8onzYiS4fEFVKK3Zp7LQVR19iMkiMROR0uY4Jkolm8Zf6arVpIBVIwzI_WfTJt-rM0NudF0stslgepmRahVbT4j6UHhDSb_nGTEITCOr4aa_21PeABT19lljUZtMXIC--rEC7k5NMjqUQqQ0Jg2xaILuzkX_dHNceGSkCD1mY0g-tTspfKiCpOjqnkXXibCgVoMat5V1hQhkh3_i4q7YogVzU0WhzyczwrFktUJjljb_usQdg-ppVcMh3Wg3JQOBHeSr8i3PqPu-Gy_Za8omudmtHT8nMWrC9BDcIAZCiEt-OwtlIMWmyBkAa5eGpmu-_98UEw",
			"type": "string"
		}
	]
}